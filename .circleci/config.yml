version: 2.1

setup: << pipeline.parameters.run-setup >>

parameters:
  run-setup:
    type: boolean
    default: true
  run-module-a:
    type: boolean
    default: false
  run-module-b:
    type: boolean
    default: false

jobs:
  module-a:
    docker:
      - image: 'cimg/ruby:2.7.4-node'
    steps:
#      - blockssh/checksession
      - checkout     
      - setup_remote_docker:
          docker_layer_caching: true
      - docker/check
      - docker/build:
          cache_from: '$DOCKER_IMAGE_NAME:$CIRCLE_SHA1'
          image: brianoh1979/circleci-demo-docker4
 #     - snyk/scan:
 #          docker-image-name: '$DOCKER_IMAGE_NAME:latest'
 #          fail-on-issues: false
 #          monitor-on-build: false
 #          project: '${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}-container'
 #          severity-threshold: high
 #          target-file: Dockerfile
 #          token-variable: SNYK_TOKEN
      - docker/push:
          image: brianoh1979/circleci-demo-docker4

  build:
    docker:
      - image: 'cimg/ruby:2.7.4-node'
    steps:
 #     - blockssh/checksession
      - checkout
      - run: sudo apt-get update
      - run: bundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"
   
  test:
    docker:
      - image: 'cimg/ruby:2.7.4-node'
      - environment:
          POSTGRES_DB: rails_blog_test
          POSTGRES_PASSWORD: ''
          POSTGRES_USER: circleci-demo-ruby
        image: 'circleci/postgres:9.5-alpine'
    environment:
      BUNDLE_JOBS: '3'
      BUNDLE_RETRY: '3'
      PGHOST: 127.0.0.1
      PGPASSWORD: ''
      PGUSER: circleci-demo-ruby
      RAILS_ENV: test
    parallelism: 3
    steps:
      - checkout
      - run: sudo apt-get update
      - run: gem install rake
      - run: bundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"
      - run: rake db:create && rake db:migrate
      - run:
          command: 'dockerize -wait tcp://localhost:5432 -timeout 1m'
          name: Wait for DB
      - run:
          command: 'bundle exec rails db:schema:load --trace'
          name: Database setup
      - ruby/rspec-test
      - ruby/rubocop-check

  deploy:
    docker:
      - image: 'cimg/ruby:2.7.4-node'
    steps:
      - checkout
      - run: sudo apt-get update
      - run: bundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java
      - ruby/install-deps
      - heroku/install
      - heroku/deploy-via-git
  
  e2e:
    executor: with-chrome
    steps:
      - checkout
      - run: ./node_modules/.bin/cypress install
      - run:
          name: Run Cypress Tests
          command: |
            npx cypress run \
            --config baseUrl=https://rails-signup-thankyou-boh.herokuapp.com/ \
            --browser firefox \
            --reporter junit \
            --reporter-options "mochaFile=results/my-test-output-[hash].xml"
      - store_test_results:
          path: results
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/screenshots

orbs:
  path-filtering: circleci/path-filtering@0.1.1
  ruby: circleci/ruby@1.1.4
  node: circleci/node@2
  heroku: circleci/heroku@1.2.6
  cypress: cypress-io/cypress@1.29.0
  docker: circleci/docker@2.1.4
#  snyk: snyk/snyk@1.2.3
  slack: circleci/slack@4.10.1
  npxcypress: brianoh1979/npxcypress@0.0.2
  cli: circleci/circleci-cli@0.1.9
#  blockssh: brianoh1979/blockssh@0.0.2
#  test-2: kelvinkfli/test-2@2.0.1

executors:
  ruby:
    docker:
      - image: 'cimg/ruby:2.7.4-node'
  with-chrome:
    docker:
      - image: 'cypress/browsers:node14.16.0-chrome90-ff88'
  
workflows:
  pre:
    when: << pipeline.parameters.run-setup >>
    jobs:
      - path-filtering/filter:
          # Compare files on main
          base-revision: cypress
          # Config for continuation; herein we reuse this config itself
          config-path: .circleci/config.yml
          # 3-column space-separated table for mapping; `path-to-test parameter-to-set value-for-parameter` for each row
          mapping: |
            .* run-setup false
            module-a/.* run-module-a true
            module-b/.* run-module-b true
  module-a:
    when: << pipeline.parameters.run-module-a >>
    jobs:
      - module-a:
         context:
           - Brian-Context2
  build_and_test:
    when: << pipeline.parameters.run-module-b >>
    jobs:
      - build
      - test:
          requires:
            - build
      - hold:
         type: approval
         requires:
           - test
      - deploy:
          requires:
            - hold
      - npxcypress/e2e:
          requires:
            - deploy
 #     - e2e:
 #         requires:
 #           - hold
         

